<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd">
  
<chapter id="Requirements">
  <title>Thumper Requirements</title>

  <para>This chapter contains the requirements of the Thumper system. In this context "system"
    means both the client and the server programs. We begin by enumerating the high level
    security properties required by the system as a whole. We then describe the requirements of
    the client and server programs separately.</para>

  <para>Since Thumper is a security sensitive program (particularly the server). Thus, it is
    useful to explicitly state the desired security goals of the system. These goals are listed
    as follows:</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>Client Correctness</emphasis>. This case pertains to time stamp tokens
        received from a time stamp server: The client should never claim to have received a
        valid time stamp response when it did not. It is acceptable, although undesirable, for
        the client to incorrectly reject a valid response as invalid.</para>

      <para>This case pertains to validating time stamps for a document received from another
        user: The client should never claim to validate a time stamp for a document if the time
        stamp is, in fact, invalid. In addition, the client should always validate a time stamp
        for a document if the time stamp is, in fact, valid. </para>
    </listitem>
    <listitem>
      <para><emphasis>Server Correctness</emphasis>. The server should never produce a valid
        time stamp in response to an invalid request, instead it should produce an appropriate
        error response. In addition, The server should always produce a valid time stamp in
        response to a valid request.</para>
    </listitem>
    <listitem>
      <para><emphasis>Server Integrity</emphasis>. The server should always function according
        to specification regardless of the inputs it receives from clients. No input, no matter
        how maliciously formed should cause the server to crash or produce inappropriate
        outputs.</para>
    </listitem>
    <listitem>
      <para><emphasis>Network Safety</emphasis>. The client and server should be able to resist
        all attacks possible by a Dolev-Yao attacker except for (1) denial-of-services attacks
        arising from removing (or delaying arbitrarily) messages sent over the network, and (2)
        denial-of-service attacks arising from flooding the server with valid requests.</para>
    </listitem>
    <listitem>
      <para><emphasis>Lack of Information Leakage</emphasis>. The server never transmits any
        information pertaining to the private key except for the signatures generated by
        it.</para>
    </listitem>
    <listitem>
      <para><emphasis>Lack of Information Corruption</emphasis>. The server never writes to the
        private key either in memory or as stored on disk.</para>
    </listitem>
  </itemizedlist>

  <para>The system also makes one important security related assumption.</para>

  <itemizedlist>
    <listitem>
      <para><emphasis>Server System Security</emphasis>. The server assumes that all files
        stored on the local file system are private to the server process (this includes the
        server's private key(s)). The server assumes the time returned by the local operating
        system is correct.</para>
    </listitem>
  </itemizedlist>

  <para>Notice that the client makes no (significant) security assumptions. As required by
    RFC-3161 the client verifies the form and content of any time stamp returned by the server.
    Furthermore the protocol does not require the client to reveal the contents of the file
    being time stamped nor provide any identifying information.</para>

  <section>
    <title>Functional Requirements</title>

    <para>The client and server must implement the protocol detailed in RFC-3161 and its update
      RFC-5816. The public key of the server must be made available to the client, by a means
      not specified here, in the form of an X.509 v3 certificate as described in RFC-5280</para>

    <para>RFC-3161 defines a number of optional transport methods for time-stamping messages.
      This version of Thumper is required to support a UDP based transport modelled after the
      "direct TCP transport" mechanism described in section 3.3 of RFC-3161. In particular only
      packets of type "tsaMsg" are to be accepted from the client and only responses of type
      "finalMsgRep" or "errorMsgRep" are to be generated by the server. No support for polling
      as defined in RFC-3161 is required. Additional transport mechanisms may be implemented as
      a future enhancement.</para>

  </section>

  <section>
    <title>Non-Functional Requirements</title>

    <para>The server should return time stamps as quickly "as possible." However this
      specification imposes no specific performance requirements. It is acknowledged that some
      applications of this protocol may require that time stamps be generated at high speed
      and/or for a large number of clients approximately simultaneously. Support for concurrent
      clients is not required but also is not forbidden by these requirements.</para>
  </section>

</chapter>
